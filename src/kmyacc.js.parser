$semval($) yyval
$semval($,%t) yyval
$semval(%n) yyastk[yysp-(%l-%n)]
$semval(%n,%t) yyastk[yysp-(%l-%n)]
$include;

var DriveCSS;
DriveCSS = DriveCSS || {};
DriveCSS.token = {};
$tokenval
DriveCSS.token.%s = %n;
$endtokenval

DriveCSS.CSSParser = function(lexer) {
    this.lexer = lexer;
};

(function() {
    var yytranslate = [
	$listvar yytranslate
    ];
    
    var YYBADCH = $(YYBADCH);
    var YYMAXLEX = $(YYMAXLEX);
    var YYTERMS = $(YYTERMS);
    var YYNONTERMS = $(YYNONTERMS);
    
    var yyaction = [
	$listvar yyaction
    ];
    
    var YYLAST = $(YYLAST);
    
    var yycheck = [
	$listvar yycheck
    ];
    
    var yybase = [
	$listvar yybase
    ];
    
    var YY2TBLSTATE = $(YY2TBLSTATE);
    
    var yydefault = [
	$listvar yydefault
    ];
    
    var yygoto = [
	$listvar yygoto
    ];
    
    var YYGLAST = $(YYGLAST);
    
    var yygcheck = [
	$listvar yygcheck
    ];
    
    var yygbase = [
	$listvar yygbase
    ];
    
    var yygdefault = [
	$listvar yygdefault
    ];
    
    var yylhs = [
	$listvar yylhs
    ];

    var yylen = [
	$listvar yylen
    ];
    
    var YYSTATES = $(YYSTATES);
    var YYNLSTATES = $(YYNLSTATES);
    var YYINTERRTOK = $(YYINTERRTOK);
    var YYUNEXPECTED = $(YYUNEXPECTED);
    var YYDEFAULT = $(YYDEFAULT);
    
    DriveCSS.CSSParser.prototype = {
	/** lexical element object **/
	token: null,
	lexer: null,

	parse: function() {
	    var yyastk = new Array();
	    var yysstk = new Array();
	    
	    yystate = 0;
	    yychar = -1;
	    
	    yysp = 0;
	    yysstk[yysp] = 0;
	    yyerrflag = 0;
	    for (;;) {
$if -t
		YYTRACE_NEWSTATE(yystate, yychar);
$endif
		if (yybase[yystate] == 0)
		    yyn = yydefault[yystate];
		else {
		    if (yychar < 0) {
		        this.token = this.lexer.next();
			if (this.token) {
			    yychar = this.token.id < YYMAXLEX ? yytranslate[this.token.id] : YYBADCH;
			}
			else {
			    yychar = 0;
			}
			// if ((yychar = this.lexer.next()) <= 0) yychar = 0;
			// yychar = yychar < YYMAXLEX ? yytranslate[yychar] : YYBADCH;
$if -t
			YYTRACE_READ(yychar);
$endif
		    }
		    
		    if (((yyn = yybase[yystate] + yychar) >= 0
			 && yyn < YYLAST && yycheck[yyn] == yychar
			 || (yystate < YY2TBLSTATE
			     && (yyn = yybase[yystate + YYNLSTATES] + yychar) >= 0
			     && yyn < YYLAST && yycheck[yyn] == yychar))
			&& (yyn = yyaction[yyn]) != YYDEFAULT) {
			/*
                         * >= YYNLSTATE: shift and reduce
                         * > 0: shift
                         * = 0: accept
                         * < 0: reduce
                         * = -YYUNEXPECTED: error
                         */
			if (yyn > 0) {
			    /* shift */
$if -t
			    YYTRACE_SHIFT(yychar);
$endif
			    yysp++;
			    
			    yysstk[yysp] = yystate = yyn;
			    yyastk[yysp] = this.token.value;
			    yychar = -1;
			    
			    if (yyerrflag > 0)
				yyerrflag--;
			    if (yyn < YYNLSTATES)
				continue;
			    
			    /* yyn >= YYNLSTATES means shift-and-reduce */
			    yyn -= YYNLSTATES;
			} else
			    yyn = -yyn;
		    } else
			yyn = yydefault[yystate];
		}
		
		for (;;) {
		    /* reduce/error */
		    if (yyn == 0) {
			/* accept */
$if -t
			YYTRACE_ACCEPT();
$endif
			return 0;
		    }
		    else if (yyn != YYUNEXPECTED) {
			/* reduce */
			yyl = yylen[yyn];
			yyval = yyastk[yysp-yyl+1];
$if -t
			YYTRACE_REDUCE(yyn);
$endif
			/* Following line will be replaced by reduce actions */
			switch(yyn) {
$reduce
			case %n:
			    {%b} break;
$endreduce
			}
			/* Goto - shift nonterminal */
			yysp -= yyl;
			yyn = yylhs[yyn];
			if ((yyp = yygbase[yyn] + yysstk[yysp]) >= 0 && yyp < YYGLAST
			    && yygcheck[yyp] == yyn)
			    yystate = yygoto[yyp];
			else
			    yystate = yygdefault[yyn];
			
			yysp++;
			
			yysstk[yysp] = yystate;
			yyastk[yysp] = yyval;
		    }
		    else {
			/* error */
			switch (yyerrflag) {
			case 0:
			    yyerror("syntax error");
			case 1:
			case 2:
			    yyerrflag = 3;
			    /* Pop until error-expecting state uncovered */
			    
			    while (!((yyn = yybase[yystate] + YYINTERRTOK) >= 0
				     && yyn < YYLAST && yycheck[yyn] == YYINTERRTOK
				     || (yystate < YY2TBLSTATE
					 && (yyn = yybase[yystate + YYNLSTATES] + YYINTERRTOK) >= 0
					 && yyn < YYLAST && yycheck[yyn] == YYINTERRTOK))) {
				if (yysp <= 0) {
				    return 1;
				}
				yystate = yysstk[--yysp];
$if -t
				YYTRACE_POP(yystate);
$endif
			    }
			    yyn = yyaction[yyn];
$if -t
			    YYTRACE_SHIFT(YYINTERRTOK);
$endif
			    yysstk[++yysp] = yystate = yyn;
			    break;
			    
			case 3:
$if -t
			    YYTRACE_DISCARD(yychar);
$endif
			    if (yychar == 0) {
				return 1;
			    }
			    yychar = -1;
			    break;
			}
		    }
		    
		    if (yystate < YYNLSTATES)
			break;
		    /* >= YYNLSTATES means shift-and-reduce */
		    yyn = yystate - YYNLSTATES;
		}
	    }
	}
    }
})();

$tailcode;

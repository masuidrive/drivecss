/***
   CSS parser
   Yuichiro MASUI a.k.a. masuidrive <masui@masuidrive.jp>
   http://github.com/masuidrive/drivecss/
*/
%token UNIMPORTANT_TOK
%token CDO CDC INCLUDES DASHMATCH BEGINSWITH ENDSWITH CONTAINS QUERY_NOT QUERY_ONLY QUERY_AND
%token STRING IDENT NTH HEX IDSEL SYM IMPORTANT_SYM
%token EMS EXS LENGTH ANGLE TIME FREQ DIMENSION PERCENTAGE INTEGER FLOATTOKEN
%token NOTFUNCTION URI FUNCTION UNICODERANGE QUERY_END
%token ALSO 

%left '+' '-'
%left '*' '/'
%left '|'
%right IDENT
%nonassoc HEX IDSEL ':' '.' '[' '*'


%%
start	: stylesheet { this.tree = $1; }
	;

stylesheet
	: rule_list
	;

rule_list
	: /* empty */ { $$ = []; }
	| rule_list rule maybe_sgml { $1.push($2); $$ = $1; }
	| rule_list ';' rule maybe_sgml { $1.push($3); $$ = $1; }
	;

maybe_sgml
	: /* empty */
	| maybe_sgml CDO
	| maybe_sgml CDC
	;

rule	: ruleset
	| sym
	;

sym	: SYM expr ';' { $$ = new DriveCSS.Node("symbol", $1, $2); }
	| SYM '{' declaration_list '}' { $$ = new DriveCSS.Node("symbol", $1, $2); }
	| SYM keyframe_name '{' keyframes_rule '}'  { $$ = new DriveCSS.Node("symbol", $1, $2, $3); }
	;

keyframe_name
	: IDENT
    	| STRING
    	;

keyframes_rule
	: /* empty */ { $$ = new DriveCSS.Node("keyframes_rule"); }
    	| keyframes_rule keyframe_rule { $$ = $1.add($2); }
	;

keyframe_rule
	:  key_list '{' declaration_list '}' { $$ = new DriveCSS.Node("keyframe_rule", $1, $3); }
	;

key_list
	: key { $$ = new DriveCSS.Node("key_list", $1); }
	| key_list ',' key { $$ = $1.add($3); }
	;

key	: PERCENTAGE
	| IDENT
	;

ruleset
	: selector_list '{' declaration_list '}' { $$ = new DriveCSS.Node('selector', $1, $3); }
	;


selector_list
	: selector { $$ = new DriveCSS.Node("selector_list", $1); }
	| selector_list ',' selector { $$ = $1.add($3); }
	;

selector
	: simple_selector { $$ = $1; }
	| selector combinator simple_selector { $$ = $1 + " " + $2 + " " + $3; }
	;

simple_selector
	: element_name
	| element_name specifier_list
	| specifier_list
	| namespace_selector element_name
	| namespace_selector element_name specifier_list
	| namespace_selector specifier_list
	;

namespace_selector
	: '|'
	| '*' '|'
	| IDENT '|'
	;

element_name
	: IDENT
	| '*'
	;

specifier_list
	: specifier
	| specifier_list specifier
	;

specifier
	: IDSEL
	| HEX
	| class
	| attrib
	| pseudo
	;

class	: '.' IDENT
	;

attr_name
	: IDENT
	;

attrib
	: '[' attr_name ']'
	| '[' attr_name match ident_or_string ']'
	| '[' namespace_selector attr_name ']'
	| '[' namespace_selector attr_name match ident_or_string ']'
	;

match
	: '='
	| INCLUDES
	| DASHMATCH
	| BEGINSWITH
	| ENDSWITH
	| CONTAINS
	;

ident_or_string
	: IDENT
	| STRING
	;

pseudo
	: ':' IDENT
	| ':' ':' IDENT
	| ':' FUNCTION expr ')'
	| ':' NOTFUNCTION expr /* simple_selector */ ')'
	;


declaration_list
	: declaration { $$ = new DriveCSS.Node("declaration_list", $1); }
	| decl_list
	;

decl_list
	: declaration ';' { $$ = new DriveCSS.Node("declaration_list", $1); }
	| decl_list declaration ';' { $$ = $1.add($2); }
	;

declaration
	: property ':' expr	 { $$ =  new DriveCSS.Node($2, $1, $3); }
	| property ':' expr prio { $$ =  new DriveCSS.Node($2, $1, $3+" "+$4); }
	;

prio	: IMPORTANT_SYM
	;

operator
	: '/'
	| ','
	| /* empty */
	;

property: IDENT
	;
	
unary_operator
        : '-'
	| '+'
        ;

combinator
	: '+'
	| '~'
	| '>'
	;

expr	: term	{ $$ = new DriveCSS.Node('expr', $1); }
	| expr operator term { $$ = $2 ? new DriveCSS.Node($2, $1, $3) : $1.add($3); }
  	;

hexcolor
	: HEX
	;

function
	: FUNCTION expr ')'	{ $$ = new DriveCSS.Node("function", $1, $2); }
	;
					
term	: INTEGER               { $$ = new DriveCSS.Node("number", parseInt($1)); }
	| unary_operator INTEGER { $$ = new DriveCSS.Node("number", parseInt($1+$2)); }
	| FLOATTOKEN            { $$ = new DriveCSS.Node("number", parseFloat($1)); }
	| unary_operator FLOATTOKEN { $$ = new DriveCSS.Node("number", parseFlaot($1+$2)); }
	| EMS                   { $$ = new DriveCSS.Node("ems", $1); }
	| unary_operator EMS    { $$ = new DriveCSS.Node("ems", $1+$2); }
	| EXS                   { $$ = new DriveCSS.Node("exs", $1); }
	| unary_operator EXS    { $$ = new DriveCSS.Node("exs", $1+$2); }
	| LENGTH                { $$ = new DriveCSS.Node("length", $1); }
	| unary_operator LENGTH { $$ = new DriveCSS.Node("length", $1+$2); }
	| ANGLE                 { $$ = new DriveCSS.Node("angle", $1); }
	| unary_operator ANGLE  { $$ = new DriveCSS.Node("angle", $1+$2); }
	| TIME                  { $$ = new DriveCSS.Node("time", $1); }
	| unary_operator TIME   { $$ = new DriveCSS.Node("time", $1+$2); }
	| FREQ                  { $$ = new DriveCSS.Node("freq", $1); }
	| unary_operator FREQ   { $$ = new DriveCSS.Node("freq", $1+$2); }
	| PERCENTAGE            { $$ = new DriveCSS.Node("percentage", $1); }
	| unary_operator PERCENTAGE { $$ = new DriveCSS.Node("percentage", $1+$2); }
	| STRING                { $$ = new DriveCSS.Node("string", $1); }
	| IDENT                 { $$ = new DriveCSS.Node("ident", $1); }
	| URI                   { $$ = new DriveCSS.Node("uri", $1); }
	| hexcolor              { $$ = new DriveCSS.Node("hexcolor", $1); }
	| function              { $$ = $1.replace(/\(/,""); }
	;

%%
/* End of parser */
